
<!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
<svg viewBox="0 0 512 512">
  <path 
    d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z" 
    fill="black"
  />
</svg>


✅📄⚠️❌

✅ store jwt on client side upon authentication w/cookies:
✅ add image-path & images to script tags in html pages:
  ✅ index (home)
  ✅ login
  ✅ admin home
✅ setup home admin page on vite config
✅ in admin login page:
  ✅ call verify serverless function, & if successful, redirect to home page
✅ redirect user to home admin page on authentication
✅ add mongo schema for products
✅ debug admin home style on desk (after collapsing nav media query):

✅ create admin home page: 
  ✅ debug main flex bugi
  ✅ ensure user is authenticated
  ✅ wait for verification function before fetching from db & rendering html
  ✅ on data fetch:
    ✅ create a li.category_title inside ul.menu_categories for every category
    ✅ create an a:link with an href property set to `#${category.toLowerCase()}`, and text set to the category
    ✅ append the a tag to the li tag
    ✅ append the li tag to ul#category_navk
    ✅ complete #menu_section: 
  - create editable fields for:
    ✅ menu items:
      ✅ add a few menu-items to get a feel for the layout
      ✅ add real menu items in db
      ✅ add a default "add item" div to every section (in js, as this will depend on how many food categories there are)
      ✅ add a gradient_container div to admin home
      ✅ add a form element at center of page, with fields for every field in the item
      ✅ add a checked event listener to input#multiple_price_option
    ⚠️ store hours (I think it's a Good Idea to keep the google hours API, as I underestimated how many times it can be called/month (I believe around 400, gotta double check)), as this would lessen the burden on Netlify function calls, & I can configure the build to not mess with the name of the function that serves as the API callback.
  ✅ fix form hide renders add new item button unclickable for a few seconds bug
  ✅ on add item click:
    ✅ remove EditForm class' onSubmit listener from the submit event on form
    ✅ add addItem method as a submit event listener to form 
  ✅ on edit item click:
    ✅ fill out form with object data
    ✅ remove the addItem listener from the form's submit event
    ✅ add the edit item listener to the form's submit event

- edit nav & logo to link to svgs instead of being in page

- add menu page for customers

- test page to ensure nothing broke:
  - seems good on mine. Will test on firefox in deploy, & will ask Khanh/Phuong to test on Mac.

⚠️ edit/delete svgs (will wait for Phuong's feedback):
                                            <img 
                        class="svg admin_svg" 
                        src="../../svgs/edit.svg"
                        alt="Edit button"
                        title="Edit ${name}"
                      />
                      <img
                        class="svg admin_svg"
                        src="../../svgs/delete.svg"
                        alt="Delete button"
                        title="Delete ${name}"
                      />

- organize home.js:
class AdminHomeInitializer {
  static async initializePage() {
    if (!(await this.authenticateUser()))
      return notify('❌ Something went wrong, please try again later')

    if (!this.cacheOldMenu('items'))
  }

  /** @returns {Promise<boolean>} A promise which resolves to a boolean indicating whether the user has been authenticated. */
  static async authenticateUser() {
    const verifyResponse = await fetch('/.netlify/functions/verify'),
      { status } = verifyResponse

    if ([401, 403].includes(status))
      window.location.replace(`${window.location.origin}/admin/login.html`)

    if (status !== 200) {
      console.error(verifyResponse)
      return false
    }

    return true
  }

  /** @returns {Promise<boolean>} A promise which resolves to a boolean indicating whether the menu data was fetched & cached. */
  static async cacheOldMenu(key) {
    

    const response = await fetch('/.netlify/functions/menu'),
      itemCategories = await response.json()

    if (itemCategories.serverError) {
      console.error(itemCategories.serverError)
      return false
    }

    try {
      localStorage.setItem(
        key,
        JSON.stringify(itemCategories.map(category => category.products).flat())
      )
      localStorage.setItem('lastCachedDateUTC', new Date().toUTCString())
    } catch (error) {
      console.error(error)
      return false
    }

    return true
  }
}
AdminHomeInitializer.initializePage()


    